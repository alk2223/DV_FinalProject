df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, sum_price,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
df <- diamonds %>% group_by(color, clarity) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, 'Low', ifelse(ratio <= KPI_Medium_Max_value, 'Medium', 'High'))) %>% rename(COLOR=color, CLARITY=clarity, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
spread(df, COLOR, SUM_PRICE) %>% View
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab\nSUM_PRICE, SUM_CARAT, SUM_PRICE / SUM_CARAT') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_CARAT),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
require(ggplot2)
require(jsonlite)
# "Crosstabs, KPIs, Barchart.twb" Equivalent Operations
# KPI Story 2 and Parameters Story 3:
# These will be made to more resemble Tableau Parameters when we study Shiny.
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, sum_price, sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'Low\\\'
when kpi < "p2" then \\\'Medium\\\'
else \\\'High\\\'
end kpi
from (select color,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color)
order by color desc;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
df <- diamonds %>% group_by(color) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, 'Low', ifelse(ratio <= KPI_Medium_Max_value, 'Medium', 'High'))) %>% rename(COLOR=color, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
spread(df, COLOR, SUM_PRICE) %>% View
require(ggplot2)
require(dplyr)
require(jsonlite)
# "Crosstabs, KPIs, Barchart.twb" Equivalent Operations
# KPI Story 2 and Parameters Story 3:
# These will be made to more resemble Tableau Parameters when we study Shiny.
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, sum_price, sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'Low\\\'
when kpi < "p2" then \\\'Medium\\\'
else \\\'High\\\'
end kpi
from (select color,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color)
order by color desc;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
df <- diamonds %>% group_by(color) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, 'Low', ifelse(ratio <= KPI_Medium_Max_value, 'Medium', 'High'))) %>% rename(COLOR=color, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
spread(df, COLOR, SUM_PRICE) %>% View
require(ggplot2)
require(dplyr)
require(jsonlite)
# "Crosstabs, KPIs, Barchart.twb" Equivalent Operations
# KPI Story 2 and Parameters Story 3:
# These will be made to more resemble Tableau Parameters when we study Shiny.
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, sum_price, sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'Low\\\'
when kpi < "p2" then \\\'Medium\\\'
else \\\'High\\\'
end kpi
from (select color,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color)
order by color desc;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
df <- diamonds %>% group_by(color) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, 'Low', ifelse(ratio <= KPI_Medium_Max_value, 'Medium', 'High'))) %>% rename(COLOR=color, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
require("dplyr")
---
Batting Statistics Visualization
===
In this document, I will explain the steps taken to create a graphical visualizaiton of batting statistics from 1985-2015.
###ScatterPlot
One of the most historic period in baseball was the HR battles of the late 90s. Year after year three players: Barry Bonds, Mark McGwire, and Sammy Sosa alternatively set and broke the single season HR record. Culminating in 2001 with Barry Bonds hitting 73, a record which still stands today. This scatter plot charts the home runs per season by these three players
![](../02 Tableau/Scatterplot.png)
```{r}
source("../01 Data/scatterplot.R", echo = TRUE)
```
###Bar chart
Our Bar Chart shows how many at bats, on average, each team in the MLB has between hitting homeruns. This bar chart shows which teams historically have been better at hitting home runs due to: ballpark construction, weather conditions, and hitting talent.
![](../02 Tableau/Bar chart.png)
```{r}
source("../01 Data/barchart.R", echo = TRUE)
```
###Blended data
In this graph, we blended the data for baseball batting and salary stats. Our visualization shows on base percentage, a metric used to determine a players offensive capabilities, and player salaries. As you can see, there is a correlation between salary and obp. There are also many outliers. Some of the highest paid players have very low on base percentages. Those players are pitchers. They get paid for the pithcing ability and not ther offensive capabilities.
![](../02 Tableau/Blended data.png)
###Cross Tab
Our cross tab shows each players average per season on base percentage for the Texas rangers. On base percentage is a KPI we created that demonstrates how effective a player is at getting on base. To create the on base percentage we used this formula (Hits + walks + times hit by pitch) / (At bats + walks + times hit by pitch + sacrifice flies). OBP is a good indicator of how a players offensive capabilities
![](../02 Tableau/Crosstab.png)
```{r}
source("../01 Data/boxplot.R", echo = TRUE)
```
require("jsonlite")
require("RCurl")
require(ggplot2)
require("dplyr")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from BATTING where AB is not NULL"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_alk2223', PASS='orcl_alk2223', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
ndf <- df %>% group_by(TEAMID)%>% summarize(absum = sum(AB), hrsum = sum(HR), value = absum/hrsum)
ndf1 <- ndf %>% ungroup %>% summarize(trend=mean(value))
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#  facet_wrap(~CLARITY, ncol=1) +
labs(title='Power Hitting by Team') +
labs(x=paste("TeamID"), y=paste("At bats per homerun")) +
layer(data=ndf,
mapping=aes(x=TEAMID, y=value),
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue"),
position=position_identity()
) +
layer(data=ndf1,
mapping=aes(yintercept = trend),
geom="hline",
geom_params=list(colour="red")
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require("dplyr")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from BATTING where AB is not NULL"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_alk2223', PASS='orcl_alk2223', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
ndf <- df %>% group_by(TEAMID)%>% summarize(absum = sum(AB), hrsum = sum(HR), value = absum/hrsum)
ndf1 <- ndf %>% ungroup %>% summarize(trend=mean(value))
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#  facet_wrap(~CLARITY, ncol=1) +
labs(title='Power Hitting by Team') +
labs(x=paste("TeamID"), y=paste("At bats per homerun")) +
layer(data=ndf,
mapping=aes(x=TEAMID, y=value),
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue"),
position=position_identity()
) +
layer(data=ndf1,
mapping=aes(yintercept = trend),
geom="hline",
geom_params=list(colour="red")
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require("dplyr")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from BATTING where AB > 100"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_alk2223', PASS='orcl_alk2223', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
ndf <- df %>% select(YEARID,AB,H,HR, BB, HBP, SF, PLAYERID, TEAMID) %>% filter(TEAMID %in% c("TEX","SFN"), YEARID == 2010) %>% mutate(obp = round((H + BB + HBP)/(AB + BB + HBP + SF),4))
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='On base percentage for World Series Teams') +
labs(x=paste("Team"), y=paste("Player")) +
layer(data=ndf,
mapping=aes(x=TEAMID, y=PLAYERID, label=obp),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require("dplyr")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="SELECT * from BATTING"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_alk2223', PASS='orcl_alk2223', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
ndf <- df %>% select(PLAYERID, YEARID, HR) %>% filter(PLAYERID %in% c("mcgwima01", "sosasa01", "bondsba01")) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut in ('Good', 'Fair');# or Equivalent SQL:  select cut, clarity from diamonds where cut = 'Good' or cut = 'Fair';
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
#facet_wrap(~SURVIVED) +
# facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='HR') +
labs(x="Age", y=paste("Fare")) +
layer(data=ndf,
mapping=aes(x=as.numeric(as.character(YEARID)), y=as.numeric(as.character(HR)), color=PLAYERID),
stat="identity",
stat_params=list(),
geom="line",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
library(shiny)
ui <- fluidpage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, function = function)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, function = function)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, function = function)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(DT)
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
View(plot_bar)
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shinyapps::setAccountInfo(name='baseballstats',
token='25561AC62CECF7F071A2A647A18587D0',
secret='JIT+VsYBL5HeI8ew2kEfSouY//vReaQ4X21O9Y12')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
require("ggplot2")
require("gplots")
require("grid")
require("plyr")
require("RCurl")
require("reshape2")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("ggthemes")
require("lubridate")
require("RCurl")
devtools::install_github('rstudio/shinyapps')
library("RCurl", lib.loc="~/R/win-library/3.2")
devtools::install_github('rstudio/shinyapps')
find_rtools()
find_rtools()
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='baseballstats',
token='25561AC62CECF7F071A2A647A18587D0',
secret='JIT+VsYBL5HeI8ew2kEfSouY//vReaQ4X21O9Y12')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
deployApp(appName = "DV_SProject1")
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/01 Data')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/02_Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/02_Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_SProject/02_Shiny')
require("jsonlite")
require("RCurl")
require("dplyr")
salary <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from SALARIES where yearID = 2010 and SALARY > 5000000"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_alk2223', PASS='orcl_alk2223', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(salary)
allstar <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from ALLSTARFULL where yearID = 2010"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_alk2223', PASS='orcl_alk2223', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(allstar)
salgood <- dplyr::left_join(salary, allstar, by="PLAYERID")
View(salgood)
require("jsonlite")
require("RCurl")
summary(good)
head(good)
require(ggplot2)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Baseball') +
labs(x="Allstar", y=paste("Salary")) +
layer(data=salgood,
mapping=aes(x=LGID.x, y=as.numeric(as.character(SALARY)), color=as.character(STARTINGPOS)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
install.packages(DT)
install.packages('DT')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
require("jsonlite")
require("RCurl")
require("ggplot2")
require("dplyr")
pitch <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="SELECT * from Pitching;"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cca628', PASS='orcl_cca628', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE) ))
award <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="SELECT * from AWARDSPLAYERS;"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cca628', PASS='orcl_cca628', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE) ))
cyAwardDf <- award %>%  filter(AWARDID == "Cy Young Award") %>%  tbl_df
cy <- dplyr::semi_join(pitch, cyAwardDf, by =c("PLAYERID","YEARID"))
View(cy)
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
require(dplyr)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/01 Data/lahman-csv_2015-01-24")
file_path <- "PlayersNames.csv"
playdf <- read.csv(file_path, stringsAsFactors = FALSE)
library(lubridate)
dimensions <- names(batdf)
write.csv(playdf, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Bats <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Bats, "(")
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/01 Data/lahman-csv_2015-01-24")
file_path <- "PlayersNames.csv"
playdf <- read.csv(file_path, stringsAsFactors = FALSE)
library(lubridate)
dimensions <- names(batdf)
write.csv(playdf, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Bats <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Bats, "(")
if( ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/01 Data/lahman-csv_2015-01-24")
file_path <- "PlayersNames.csv"
playdf <- read.csv(file_path, stringsAsFactors = FALSE)
library(lubridate)
dimensions <- names(playdf)
write.csv(playdf, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Bats <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Bats, "(")
if( ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/01 Data/lahman-csv_2015-01-24")
file_path <- "PlayerNames.csv"
playdf <- read.csv(file_path, stringsAsFactors = FALSE)
library(lubridate)
dimensions <- names(playdf)
write.csv(playdf, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Bats <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Bats, "(")
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/01 Data/lahman-csv_2015-01-24")
file_path <- "PlayerNames.csv"
playdf <- read.csv(file_path, stringsAsFactors = FALSE)
library(lubridate)
dimensions <- names(playdf)
write.csv(playdf, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Bats <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Bats, "(")
for(d in dimensions) {
if(d != tail(dimensions, n=1)) sql <- paste(sql, paste(d, "varchar2(4000),\n"))
else sql <- paste(sql, paste(d, "varchar2(4000)\n"))
}
sql <- paste(sql, ");")
cat(sql)
require("jsonlite")
require("RCurl")
require("ggplot2")
require("dplyr")
require("shiny")
library("shiny")
bat <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="SELECT * from BATTING;"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cca628', PASS='orcl_cca628', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE) ))
award <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="SELECT * from AWARDSPLAYERS;"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cca628', PASS='orcl_cca628', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE) ))
play <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="SELECT * from PlayerNames;"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cca628', PASS='orcl_cca628', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE) ))
awarddf <- award %>%  filter(AWARDID == "Most Valuable Player") %>%  tbl_df
playname <- dplyr::semi_join(play, bat, by = "PLAYERID")
playname <- dplyr::semi_join(bat, play, by = "PLAYERID")
View(playname)
playname <- dplyr::left_join(bat, play, by = "PLAYERID")
View(playname)
playname <- dplyr::right_join(bat, play, by = "PLAYERID")
View(playname)
playname <- dplyr::right_join(play, bat, by = "PLAYERID")
View(playname)
mvp <- dplyr::semi_join(playname, awarddf, by =c("PLAYERID","YEARID"))
View(mvp)
require("jsonlite")
require("RCurl")
require("ggplot2")
require("dplyr")
pitch <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="SELECT * from Pitching;"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cca628', PASS='orcl_cca628', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE) ))
award <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="SELECT * from AWARDSPLAYERS;"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cca628', PASS='orcl_cca628', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE) ))
play <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="SELECT * from PlayerNames;"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_cca628', PASS='orcl_cca628', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE) ))
cyAwardDf <- award %>%  filter(AWARDID == "Cy Young Award") %>%  tbl_df
playname <- dplyr::right_join(play, pitch, by = "PLAYERID")
cy <- dplyr::semi_join(playname, cyAwardDf, by =c("PLAYERID","YEARID"))
View(cy)
shiny::runApp('C:/Users/chase_000/Desktop/College/Fall 2015/Data Visualization/DV_FinalProject/04 Shiny')
